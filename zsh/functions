# For historical purposes
HISTSIZE=10000
SAVEHIST=8500



###### random cowsay stuff
function random_cow()
{
  files=(/usr/share/cowsay/cows/*)
  printf "%s\n" "${files[RANDOM % ${#files}]}"
}



# Turns stderr to red.
# use like
#    color command -program -args
# color() (set -o pipefail;"$@" 2>&1>&3|sed $'s,.*,\e[1;31m&\e[m,'>&2)3>&1
#

# Display a line as wide as the screen
function horzline() {
    l=`builtin printf %${2:-$COLUMNS}s` && echo -e "${l// /${1:-=}}";
}

function showcolor() {
    for i in {0..255}; do echo -e "\e[38;05;${i}m${i}"; done | column -c 80 -s '  '; echo -e "\e[m"
}

function whatthecommit() {
    lynx -dump -nolist http://whatthecommit.com/|sed -n 1p
}


# Removes trailing whitespace from files.
function fix_whitespace() {
    find . -name "$1" -exec sed -i '' -e 's/\ *$//' {} ';'
}

# Wait for file to appear then view it.

function wless() { while [ \! -f "$1" ]; do sleep 1 ; done; less "$1" ; }

##################################################
# To create a ZIP archive of a file or folder	 #
##################################################

function zipf() { zip -r "$1".zip "$1" ; }

##################################################
# Adds some text in the terminal frame		 #
##################################################

function xtitle()
{
    case "$TERM" in
        *term | rxvt)
            echo -n -e "\033]0;$*\007" ;;
        *)
            ;;
    esac
}

##################################################
# Copy a file prefixed with a version number to a#
# subdirectory                                   #
##################################################

function vers() { ( IFS=$'\n'; suf="_versions"; mkdir -p "$1$suf"; nr=`ls "$1$suf" | wc -l`; nr=`printf "%02d" $(($nr + 1))`; cp "$1" "$1$suf/v${nr}_$1" ) ; }



##################################################
# Run a command, redirecting output to a file, 	 #
# then edit the file with vim			 #
##################################################

function vimcmd() { $1 > $2 && vim $2; }

##################################################
# Telling you from where your commit come from	 #
##################################################

# function where()
# {
#     COUNT=0; while [ `where_arg $1~$COUNT | wc -w` == 0 ]; do let COUNT=COUNT+1; done; echo "$1 is ahead of "; where_arg $1~$COUNT; echo "by $COUNT commits";};function where_arg() { git log $@ --decorate -1 | head -n1 | cut -d ' ' -f3- ;
# }


##################################################
# Decompiler for jar files using jad             #
##################################################

function unjar() { mkdir -p /tmp/unjar/$1 ; unzip -d /tmp/unjar/$1 $1 *class 1>/dev/null && find /tmp/unjar/$1 -name *class -type f | xargs jad -ff -nl -nonlb -o -p -pi99 -space -stat ; rm -r /tmp/unjar/$1 ; }


##################################################
# Moves specified files to ~/.Trash		 #
##################################################

###### will not overwrite files that have the same name
function trashit()
{   local trash_dir=$HOME/.Trash
    for file in "$@" ; do
        if [[ -d $file ]] ; then
            local already_trashed=$trash_dir/`basename $file`
            if [[ -n `/bin/ls -d $already_trashed*` ]] ; then
                local count=`/bin/ls -d $already_trashed* | /usr/bin/wc -l`
                count=$((++count))
                /bin/mv --verbose "$file" "$trash_dir/$file$count"
                continue
            fi
        fi
        /bin/mv --verbose --backup=numbered "$file" $HOME/.Trash
    done
}

##################################################
# Top-ten commands				 #
##################################################

function top10() {
	# copyright 2007 - 2010 Christopher Bratusek
	history | awk '{a[$2]++ } END{for(i in a){print a[i] " " i}}' | sort -rn | head
}

##################################################
# Add a function you've defined to .zshrc	 #
##################################################

function addfunction() { declare -f $1 >> ~/.dotfiles/zsh/functions-extra ; }

##################################################

